/* Generated By:JavaCC: Do not edit this line. ConstraintParser.java */
package sequencingConstraints.constraintParser;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;

import sequencingConstraints.*;
import util.Constants;

public class ConstraintParser implements ConstraintParserConstants {

   // store events
   private List<String> events;

   // a list of events that appear in the sequencing constraint
   private List<String> usedEvents;

   public ConstraintParser (String constraint, List<String> eventsList) {
      this(new StringReader (constraint));
      events = eventsList;

      usedEvents = new ArrayList<String> ();
   }

        // get the list of used events
        public List<String> getUsedEventsList () {
                return usedEvents;
        }

        // Here Ret is a constraint info
   public TypeInfo parse () throws ParseException {
           return ((TypeInfo) ACTConstraint(true));
   }

        public static void main (String args[]) throws ParseException {
//		String constraint = "Open ...+ {Close, Read, Write}" + " && " +
//			"(_ Open && Open .~. Close) -+ {Read, Write, Close}" + " && " +
//			"{Open, Read, Write} +... Close";
//		String constraint = "(_ Open && Open .~. Close) -+ {Read, Write, Close}"; // check if nesting is parsed correctly
//		String constraint = "(_ Open && Open .~. Close -+ {Read, Write, Close})"; // different from above due to precedence

//		// check if NOT and CONCAT operators are parsed correctly as the new BNF
                String constraint = "(_ Read && !_({Close}.{Read,Write,Close})) +- ((_ Open && {Open} ~ {Write,Close}) -+ Write && _ Write)";

                List<String> events = new ArrayList<String>();
            events.add(new String("Open"));
            events.add(new String("Close"));
            events.add(new String("Read"));
            events.add(new String("Write"));

            ConstraintParser parser = new ConstraintParser(constraint, events);
            try{
                 System.out.println(constraint);
                 System.out.println(events);
                 TypeInfo ti = parser.parse();

                 String text = ti.getText();
                 System.out.println(text);

                         System.out.println(ti.getConstraint().plainText());

            } catch (Exception ex){
                 System.out.print(ex);
            }

          }

  final public Object ACTConstraint(boolean parse_only) throws ParseException {
   Object rval;
    rval = LogicalExpression(parse_only);
     if (parse_only) {
        TypeInfo rvalTI = (TypeInfo) rval;
        if (rvalTI.getType() != Constants.TYPE_BOOL) {
           {if (true) throw new ParseException("Boolean expression expected:\u005cn" + rvalTI.getText());}
        }
     }
     {if (true) return rval;}
    throw new Error("Missing return statement in function");
  }

  final public Object LogicalExpression(boolean parse_only) throws ParseException {
   Object rval;
    rval = OrExpression(parse_only);
         {if (true) return rval;}
    throw new Error("Missing return statement in function");
  }

  final public Object OrExpression(boolean parse_only) throws ParseException {
   Token t = null;
   Object rval;
   Object temp;
   TypeInfo rvalTI = null;
   TypeInfo tempTI = null;
    rval = AndExpression(parse_only);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      t = jj_consume_token(OR);
      temp = AndExpression(parse_only);
        if(parse_only){
            tempTI  = (TypeInfo)temp;
            rvalTI = (TypeInfo)rval;

            TypeInfo rv = new TypeInfo();
            rv.setType(Constants.TYPE_BOOL);
            rv.setText(rvalTI.getText() + " " + t.image + " " + tempTI.getText());

                if(rvalTI.getType() != Constants.TYPE_BOOL) {
                        {if (true) throw new ParseException("Boolean type expected: " + rvalTI.getText()
                                    + "\u005cn" + "   in expression: " + rv.getText());}
                }
                else if(tempTI.getType() != Constants.TYPE_BOOL) {
                {if (true) throw new ParseException("Boolean type expected: " + tempTI.getText()
                                     + "\u005cn" + "   in expression: " + rv.getText());}
                }

                rv.setConstraint(new Constraint(t.image, rvalTI.getConstraint(), tempTI.getConstraint()));
            rval = rv;
             } else {
             rval = new Boolean(
                   ((Boolean) rval).booleanValue ()
                   || ((Boolean) temp).booleanValue ());
         }
    }
       {if (true) return rval;}
    throw new Error("Missing return statement in function");
  }

  final public Object AndExpression(boolean parse_only) throws ParseException {
   Token t = null;
   Object rval;
   Object temp;
   TypeInfo rvalTI = null;
   TypeInfo tempTI = null;
    rval = ConcatExpression(parse_only);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      t = jj_consume_token(AND);
      temp = ConcatExpression(parse_only);
        if(parse_only){
            tempTI  = (TypeInfo)temp;
            rvalTI = (TypeInfo)rval;

            TypeInfo rv = new TypeInfo();
            rv.setType(Constants.TYPE_BOOL);
            rv.setText(rvalTI.getText() + " " + t.image + " " + tempTI.getText());

                if(rvalTI.getType() != Constants.TYPE_BOOL) {
                        {if (true) throw new ParseException("Boolean type expected: " + rvalTI.getText()
                                    + "\u005cn" + "   in expression: " + rv.getText());}
                }
                else if(tempTI.getType() != Constants.TYPE_BOOL) {
                {if (true) throw new ParseException("Boolean type expected: " + tempTI.getText()
                                     + "\u005cn" + "   in expression: " + rv.getText());}
                }

                rv.setConstraint(new Constraint(t.image, rvalTI.getConstraint(), tempTI.getConstraint()));
            rval = rv;
             } else {
             rval = new Boolean(
                   ((Boolean) rval).booleanValue ()
                   && ((Boolean) temp).booleanValue ());
         }
    }
       {if (true) return rval;}
    throw new Error("Missing return statement in function");
  }

  final public Object ConcatExpression(boolean parse_only) throws ParseException {
   Token t = null;
   Object rval;
   Object temp;
   TypeInfo rvalTI = null;
   TypeInfo tempTI = null;
    rval = NotExpression(parse_only);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONCAT:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      t = jj_consume_token(CONCAT);
      temp = NotExpression(parse_only);
        if(parse_only){
            tempTI  = (TypeInfo)temp;
            rvalTI = (TypeInfo)rval;

            TypeInfo rv = new TypeInfo();
            rv.setType(Constants.TYPE_BOOL);
            rv.setText(rvalTI.getText() + " " + t.image + " " + tempTI.getText());

                if(rvalTI.getType() != Constants.TYPE_BOOL) {
                        {if (true) throw new ParseException("Boolean type expected: " + rvalTI.getText()
                                    + "\u005cn" + "   in expression: " + rv.getText());}
                }
                else if(tempTI.getType() != Constants.TYPE_BOOL) {
                {if (true) throw new ParseException("Boolean type expected: " + tempTI.getText()
                                     + "\u005cn" + "   in expression: " + rv.getText());}
                }

                rv.setConstraint(new Constraint(t.image, rvalTI.getConstraint(), tempTI.getConstraint()));
            rval = rv;
             }
    }
       {if (true) return rval;}
    throw new Error("Missing return statement in function");
  }

  final public Object NotExpression(boolean parse_only) throws ParseException {
   Token t = null;
   Token tt = null;
   Object temp;
   Object rval = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      t = jj_consume_token(NOT);
      rval = TemporalExpression(parse_only);
    if(parse_only) {
     TypeInfo rvalTI = (TypeInfo) rval;
     TypeInfo ti = new TypeInfo ();
     ti.setType (Constants.TYPE_BOOL);
     ti.setText(t.image + " " + rvalTI.getText());

         ti.setConstraint(new Constraint(t.image, rvalTI.getConstraint(), null));
     rval = ti;
   }
     {if (true) return rval;}
      break;
    case OPENBRACE:
    case ALWAYS:
    case OPENPAREN:
    case IDENTIFIER:
      rval = TemporalExpression(parse_only);
     if (parse_only) {
        TypeInfo rvalTI = (TypeInfo) rval;
        if (rvalTI.getType() != Constants.TYPE_BOOL) {
           {if (true) throw new ParseException("Boolean expression expected:\u005cn" + rvalTI.getText());}
        }
     }
     {if (true) return rval;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Object TemporalExpression(boolean parse_only) throws ParseException {
   Token t = null;
   Object rval;
   Object temp;
   TypeInfo rvalTI = null;
   TypeInfo tempTI = null;
    rval = AlwaysExpression(parse_only);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IL:
      case IR:
      case IN:
      case GL:
      case GR:
      case GN:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IR:
        t = jj_consume_token(IR);
        temp = AlwaysExpression(parse_only);
            if(parse_only){
            tempTI  = (TypeInfo)temp;
            rvalTI = (TypeInfo)rval;

            TypeInfo rv = new TypeInfo();
            rv.setType(Constants.TYPE_BOOL);
            rv.setText(rvalTI.getText() + " " + t.image + " " + tempTI.getText());

                rv.setConstraint(new Constraint(t.image, rvalTI.getConstraint(), tempTI.getConstraint()));
            rval = rv;
        } else {
                //unable to directly get the boolean value of temporal expression in parser
                rval = null;
      }
        break;
      case IL:
        t = jj_consume_token(IL);
        temp = AlwaysExpression(parse_only);
            if(parse_only){
            tempTI  = (TypeInfo)temp;
            rvalTI = (TypeInfo)rval;

            TypeInfo rv = new TypeInfo();
            rv.setType(Constants.TYPE_BOOL);
            rv.setText(rvalTI.getText() + " " + t.image + " " + tempTI.getText());

                rv.setConstraint(new Constraint(t.image, rvalTI.getConstraint(), tempTI.getConstraint()));
            rval = rv;
        } else {
                //unable to directly get the boolean value of temporal expression in parser
                rval = null;
      }
        break;
      case IN:
        t = jj_consume_token(IN);
        temp = AlwaysExpression(parse_only);
            if(parse_only){
            tempTI  = (TypeInfo)temp;
            rvalTI = (TypeInfo)rval;

            TypeInfo rv = new TypeInfo();
            rv.setType(Constants.TYPE_BOOL);
            rv.setText(rvalTI.getText() + " " + t.image + " " + tempTI.getText());

                rv.setConstraint(new Constraint(t.image, rvalTI.getConstraint(), tempTI.getConstraint()));
            rval = rv;
        } else {
                //unable to directly get the boolean value of temporal expression in parser
                rval = null;
      }
        break;
      case GR:
        t = jj_consume_token(GR);
        temp = AlwaysExpression(parse_only);
            if(parse_only){
            tempTI  = (TypeInfo)temp;
            rvalTI = (TypeInfo)rval;

            TypeInfo rv = new TypeInfo();
            rv.setType(Constants.TYPE_BOOL);
            rv.setText(rvalTI.getText() + " " + t.image + " " + tempTI.getText());

                rv.setConstraint(new Constraint(t.image, rvalTI.getConstraint(), tempTI.getConstraint()));
            rval = rv;
        } else {
                //unable to directly get the boolean value of temporal expression in parser
                rval = null;
      }
        break;
      case GL:
        t = jj_consume_token(GL);
        temp = AlwaysExpression(parse_only);
            if(parse_only){
            tempTI  = (TypeInfo)temp;
            rvalTI = (TypeInfo)rval;

            TypeInfo rv = new TypeInfo();
            rv.setType(Constants.TYPE_BOOL);
            rv.setText(rvalTI.getText() + " " + t.image + " " + tempTI.getText());

                rv.setConstraint(new Constraint(t.image, rvalTI.getConstraint(), tempTI.getConstraint()));
            rval = rv;
        } else {
                //unable to directly get the boolean value of temporal expression in parser
                rval = null;
      }
        break;
      case GN:
        t = jj_consume_token(GN);
        temp = AlwaysExpression(parse_only);
            if(parse_only){
            tempTI  = (TypeInfo)temp;
            rvalTI = (TypeInfo)rval;

            TypeInfo rv = new TypeInfo();
            rv.setType(Constants.TYPE_BOOL);
            rv.setText(rvalTI.getText() + " " + t.image + " " + tempTI.getText());

                rv.setConstraint(new Constraint(t.image, rvalTI.getConstraint(), tempTI.getConstraint()));
            rval = rv;
        } else {
                //unable to directly get the boolean value of temporal expression in parser
                rval = null;
      }
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return rval;}
    throw new Error("Missing return statement in function");
  }

  final public Object AlwaysExpression(boolean parse_only) throws ParseException {
   Token t = null;
   Token tt = null;
   Object temp;
   Object rval = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALWAYS:
      t = jj_consume_token(ALWAYS);
      rval = ParenExpression(parse_only);
    if(parse_only) {
     TypeInfo rvalTI = (TypeInfo) rval;
     TypeInfo ti = new TypeInfo ();
     ti.setType (Constants.TYPE_BOOL);
     ti.setText(t.image + " " + rvalTI.getText());

         ti.setConstraint(new Constraint(t.image, rvalTI.getConstraint(), null));
     rval = ti;
   }
     {if (true) return rval;}
      break;
    case OPENBRACE:
    case OPENPAREN:
    case IDENTIFIER:
      rval = ParenExpression(parse_only);
     if (parse_only) {
        TypeInfo rvalTI = (TypeInfo) rval;
        if(rvalTI.getType() != Constants.TYPE_BOOL) {
                {if (true) throw new ParseException("Boolean expression expected:\u005cn" + rvalTI.getText());}
        }
     }
     {if (true) return rval;}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Object ParenExpression(boolean parse_only) throws ParseException {
   Token t = null;
   Token tt = null;
   Object temp;
   Object rval = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENPAREN:
      t = jj_consume_token(OPENPAREN);
      rval = LogicalExpression(parse_only);
      tt = jj_consume_token(CLOSEPAREN);
   if(parse_only) {
     TypeInfo rvalTI = (TypeInfo) rval;
     TypeInfo ti = new TypeInfo ();
     ti.setType (rvalTI.getType());
     ti.setText(t.image + rvalTI.getText() + tt.image);

         ti.setConstraint(rvalTI.getConstraint());
     rval = ti;
   }
     {if (true) return rval;}
      break;
    case OPENBRACE:
    case IDENTIFIER:
      rval = EventSetExpression(parse_only);
     if (parse_only) {
        TypeInfo rvalTI = (TypeInfo) rval;
        if (rvalTI.getType() != Constants.TYPE_BOOL) {
           {if (true) throw new ParseException("Boolean expression expected:\u005cn" + rvalTI.getText());}
        }
     }
     {if (true) return rval;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Object EventSetExpression(boolean parse_only) throws ParseException {
   Token t = null;
   Token tt = null;
   Object temp;
   Object rval = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
  if(parse_only){
     boolean isEvent = events.contains(t.image);
     if (isEvent == false) {
        {if (true) throw new ParseException("Unrecognized event: " + t.image
                                                                + "\u005cn");}
     } else {
        TypeInfo rv = new TypeInfo();
        rv.setType (Constants.TYPE_BOOL); // event set is considered as Boolean since itself is a constraint

        rv.setText (t.image);

        rv.setConstraint(new Constraint(t.image, null, null));
        rval = rv;

        // add this valid event into usedEvents list
        usedEvents.add (t.image);
     }
  } else {
    boolean isEvent = events.contains(t.image);
    if (isEvent == false) {
           {if (true) throw new ParseException ("Unrecognized event: " + t.image
                                                                        + "\u005cn");}
    }
  }
      break;
    case OPENBRACE:
      t = jj_consume_token(OPENBRACE);
      rval = EventListExpression(parse_only);
      tt = jj_consume_token(CLOSEBRACE);
   if(parse_only) {
     TypeInfo rvalTI = (TypeInfo) rval;
     TypeInfo ti = new TypeInfo ();
     ti.setType (Constants.TYPE_BOOL); // event set is considered as Boolean since itself is a constraint
     ti.setText(t.image + rvalTI.getText() + tt.image);

         ti.setConstraint(new Constraint(t.image, rvalTI.getConstraint(), null));
     rval = ti;
   }
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return rval;}
    throw new Error("Missing return statement in function");
  }

  final public Object EventListExpression(boolean parse_only) throws ParseException {
   Token t = null;
   Object rval;
   Object temp;
   TypeInfo rvalTI = null;
   TypeInfo tempTI = null;
    rval = EventExpression(parse_only);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_5;
      }
      t = jj_consume_token(COMMA);
      temp = EventListExpression(parse_only);
        if(parse_only){
            tempTI  = (TypeInfo)temp;
            rvalTI = (TypeInfo)rval;

            TypeInfo rv = new TypeInfo();
            rv.setType(Constants.TYPE_EVENT); // type of event set
            rv.setText(rvalTI.getText() + " " + t.image + " " + tempTI.getText());

                if(rvalTI.getType() != Constants.TYPE_EVENT) {
                        {if (true) throw new ParseException("Event type expected: " + rvalTI.getText()
                                    + "\u005cn" + "   in expression: " + rv.getText());}
                }
                else if(tempTI.getType() != Constants.TYPE_EVENT) {
                {if (true) throw new ParseException("Event type expected: " + tempTI.getText()
                                     + "\u005cn" + "   in expression: " + rv.getText());}
                }

            rv.setConstraint(new Constraint(t.image, rvalTI.getConstraint(), tempTI.getConstraint()));
            rval = rv;
             } else {
             rval = new Boolean(
                   ((Boolean) rval).booleanValue ()
                   && ((Boolean) temp).booleanValue ());
         }
    }
       {if (true) return rval;}
    throw new Error("Missing return statement in function");
  }

  final public Object EventExpression(boolean parse_only) throws ParseException {
   Token t = null;
   Token tt = null;
   Object temp;
   Object rval = null;
    t = jj_consume_token(IDENTIFIER);
  if(parse_only){
     boolean isEvent = events.contains(t.image);
     if (isEvent == false) {
        {if (true) throw new ParseException("Unrecognized event: " + t.image
                                                                + "\u005cn");}
     } else {
        TypeInfo rv = new TypeInfo();
        rv.setType (Constants.TYPE_EVENT);

        rv.setText (t.image);

        rv.setConstraint(new Constraint(t.image, null, null));
        rval = rv;

        // add this valid event into usedEvents list
        usedEvents.add (t.image);
     }
  } else {
    boolean isEvent = events.contains(t.image);
    if (isEvent == false) {
           {if (true) throw new ParseException ("Unrecognized event: " + t.image
                                                                        + "\u005cn");}
    }
  }
     {if (true) return rval;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ConstraintParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100000,0x80000,0x40000,0x228120,0x7e00,0x7e00,0x208120,0x208020,0x200020,0x80,};
   }

  /** Constructor with InputStream. */
  public ConstraintParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ConstraintParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ConstraintParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ConstraintParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ConstraintParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ConstraintParser(ConstraintParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ConstraintParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[24];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 10; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 24; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
